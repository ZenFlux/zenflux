# This workflow cancels the `self-hosted` workflow if it is queued and waits for it to complete.
# It then triggers the `github-hosted` workflow to continue running.

name: Manage runners

on:
  pull_request_target:
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:

jobs:
  manage-jobs:
    runs-on: ubuntu-latest
    permissions: write-all
    env:
        SELF_HOSTED_WORKFLOW_NAME: 0-main-self-hosted.yml
        SELF_HOSTED_WORKFLOW_STATUS_QUEUED: queued
        SELF_HOSTED_AWAIT_BEFORE_CANCEL_MS: 5000
        SELF_HOSTED_BREAK_CONDITION_STATUS: in_progress

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get Job ID
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: get-job-id
        run: |
          sleep 60
          JOB_ID=$(gh api repos/${{ github.repository }}/actions/runs --jq '.workflow_runs[] | select(.status == "${{ env.SELF_HOSTED_WORKFLOW_STATUS_QUEUED}}" and .path == ".github/workflows/${{ env.SELF_HOSTED_WORKFLOW_NAME }}") | .id' | head -1)
          echo "::set-output name=job_id::$JOB_ID"

      - name: Cancel Job
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const delay = ms => new Promise(res => setTimeout(res, ms));

            async function cancelSelfHostedWorkflow() {
              const jobId = "${{ steps.get-job-id.outputs.job_id }}";

              if (jobId) {
                await github.rest.actions.cancelWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: jobId
                });

                while (true) {
                  core.info('Waiting for workflow to cancel ...');
                  await delay(${{ env.SELF_HOSTED_AWAIT_BEFORE_CANCEL_MS }});

                  const { status } = await github.rest.actions.getWorkflowRun({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: jobId
                  });

                  if (status !== "${{ env.SELF_HOSTED_BREAK_CONDITION_STATUS }}") {
                    core.info('Workflow has been cancelled');
                    break;
                  }
                }
              } else {
                core.info('No queued runs to cancel');
              }
            }

            cancelSelfHostedWorkflow();
